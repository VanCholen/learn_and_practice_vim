vim提供了几十组寄存器用于保存文本，而非只用系统单一的剪切版。


7.1 用无名寄存器实现删除、复制与粘贴

在vim里，与删除、复制与粘贴有关的对象不是操作系统剪贴版，
而是寄存器。一般x,d,p等指令涉及的都是无名寄存器。

[lab]
将下面的ccc换成aaa
aaa bbb ccc ddd

**注意**
如果你先使用y复制”aaa“，再使用d删除”ccc“，最后p。那么结果将会出错。




7.2 vim寄存器

在7.1里的例子是一个丢失寄存器内容的典型例子。y命令与d命令共用一
个寄存器导致出现问题。

可以给命令加上"{register}前缀的方式指定要用的寄存器。

[lab]
将下面的ccc换成aaa
aaa bbb ccc ddd

**提示**
尝试指令"ayiw，再fc，最后diw, "aP
如果使用Ex命令，形式类似:delete c, :put a

无名寄存器"", ""p等同于p
复制专用寄存器"0

查看有名寄存器a的内容:reg "a

有名寄存器"a-"z

表达式寄存器"=
当前文件名寄存器"%

在插入模式下，<C-r>{register}可以插入寄存器的内容，如<C-r>a
可以插入寄存器a的内容。





7.3 用寄存器的内容替换高亮选区的文本

[lab]
交换chips与fish的位置
I like fish and chips.
**提示**
ff, mm, diw, fc, viw, p, `m, P





7.4 宏的读取与执行

宏命令是一组命令的记录，通过运行一个简单的宏，
vim可以自动地去执行记录的多个指令。

- q{register} : 开始录制操作
- q : 结束操作录制
- @{register} : 回放宏
- @@ : 重复最近调用过的宏
简单的修改通过.命令重复，复杂的修改通过宏结束

[lab]
给下面的变量加上var类型前缀与;结束符
"""
var foo = 1;
var bar = 'a';
var foobar = foo + bar;

foo = 1
bar = 'a'
foobar = foo + bar
"""

在录制宏的时候，考虑到”移植兼容性“，推荐使用w,b,e,ge而不是
h,j,k,l。同时动作命令失败时，宏将自动终止执行，可以利用这个
特点来巧妙地设置宏命令结束的标志。
{n}@{register}表示执行n次宏。如果失败了，则自动结束。





7.5 加次数回放宏

[lab]
x = "(" + a + "," + b + "," + c + "," + d + "," + e + ")";
将下面的语句改为上面的样式
x = "("+a+","+b+","+c+","+d+","+e+")";

**提示**
f+, s + , qa, ;., q, 10@a




7.6 在连续的文本行上重复修改

[lab]
1) One
2) Two
3) Three
4) Four

改成上面的样式
1. one
2. two
3. three
4. four

**提示**
qa, 0, f., r), w~, j, q, 10@a




[lab]
1) One
2) Two
// comment
3) Three
4) Four

改成上面的样式
1. one
2. two
// comment
3. three
4. four


**提示**
先处理一行：qa, 0, f., r), w~, q
再并行处理：可视模式高亮选择未处理的行，:'<'>normal @a
